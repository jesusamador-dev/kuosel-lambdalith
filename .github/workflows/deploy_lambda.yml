name: Deploy FastAPI Lambda

# Disparadores: cuando se hace push a la rama main
on:
  push:
    branches:
      - main

# Definir los trabajos del flujo
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Check out the repository
        uses: actions/checkout@v3

      # 2. Configurar Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Instalar dependencias y generar archivos .so
      - name: Install dependencies
        run: |
         docker run --rm -v $(pwd):/app -w /app --user $(id -u):$(id -g) public.ecr.aws/sam/build-python3.11 bash -c "
          pip install --platform manylinux2014_x86_64 \
                      --target dependencies \
                      --implementation cp \
                      --python-version 3.11 \
                      --only-binary=:all: \
                      --no-cache-dir \
                      --upgrade -r requirements.txt
          "


      # 4. Validar generación de archivos .so
      - name: Validate .so files
        run: ls -l dependencies/pydantic_core

      - name: Clean previous builds
        run: rm -rf package/ deployment-package.zip


      # 4. Empaquetar la aplicación Lambda usando AWS SAM
      - name: Prepare package directory
        run: |
          chmod -R 755 dependencies/
          mkdir -p package/
          rsync -av dependencies/ package/dependencies
          cp main.py package/
          cp -r src/ package/src
          cd package
          zip -r ../deployment-package.zip .
      

      # 5. Configurar AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Desplegar la función Lambda
      - name: Update config
        run: |
          aws lambda update-function-configuration \
          --function-name kuosel-lambdalith \
          --environment Variables='{
            "COGNITO_USER_POOL_ID": "'"${COGNITO_USER_POOL_ID}"'",
            "COGNITO_CLIENT_ID": "'"${COGNITO_CLIENT_ID}"'",
            "COGNITO_DOMAIN": "'"${COGNITO_DOMAIN}"'",
            "DB_USER": "'"${DB_USER}"'",
            "DB_PASSWORD": "'"${DB_PASSWORD}"'",
            "DB_HOST": "'"${DB_HOST}"'",
            "DB_PORT": "'"${DB_PORT}"'",
            "DB_NAME": "'"${DB_NAME}"'",
            "PYTHONPATH": "/var/task/dependencies:/var/task"
          }'

      # 6. Desplegar la función Lambda
      - name: Deploy with CLI
        run: |
          aws lambda update-function-code \
          --function-name kuosel-lambdalith \
          --zip-file fileb://deployment-package.zip
            

      # 7. Limpiar archivos temporales
      - name: Clean up temporary files
        run: rm -rf package/ dependencies/ deployment-package.zip
