name: Deploy FastAPI Lambda

# Disparadores: cuando se hace push a la rama main
on:
  push:
    branches:
      - main

# Definir los trabajos del flujo
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Check out the repository
        uses: actions/checkout@v3

      # 2. Configurar Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Instalar dependencias y generar archivos .so
      - name: Install dependencies
        run: |
         docker run --rm -v $(pwd):/app -w /app public.ecr.aws/sam/build-python3.11 bash -c "
          python3 -m pip install --upgrade pip &&
          pip install --platform manylinux2014_x86_64 \
                      --target dependencies \
                      --implementation cp \
                      --python-version 3.11 \
                      --only-binary=:all: \
                      --upgrade -r requirements.txt
          "


      # 4. Validar generación de archivos .so
      - name: Validate .so files
        run: ls -l dependencies/pydantic_core

      - name: Clean previous builds
        run: rm -rf package/ deployment-package.zip


      # 4. Empaquetar la aplicación Lambda usando AWS SAM
      - name: Package SAM application
        run: |
          mkdir -p package/
          cp -r dependencies/ package/dependencies
          cp main.py package/  # Copiar main.py a la raíz de package
          cp -r src/ package/src  # Si tienes una carpeta src con tu código fuente
          cd package && zip -r ../deployment-package.zip .

      - name: Validate ZIP contents
        run: unzip -l deployment-package.zip


      # 5. Configurar AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Desplegar la función Lambda
      - name: Deploy with SAM
        run: |
          sam build
          sam deploy --resolve-s3 --no-confirm-changeset --stack-name kuosel-lambdalith --capabilities CAPABILITY_IAM \
            --parameter-overrides \
            CognitoUserPoolId=${{ secrets.COGNITO_USER_POOL_ID }} \
            CognitoClientId=${{ secrets.COGNITO_CLIENT_ID }} \
            AwsRegion=${{ secrets.AWS_REGION }} \
            CognitoDomain=${{ secrets.COGNITO_DOMAIN }} \
            DbUser=${{ secrets.DB_USER }} \
            DbPassword=${{ secrets.DB_PASSWORD }} \
            DbHost=${{ secrets.DB_HOST }} \
            DbPort=${{ secrets.DB_PORT }} \
            DbName=${{ secrets.DB_NAME }}
      

      # 7. Limpiar archivos temporales
      - name: Clean up temporary files
        run: rm -rf package/ dependencies/ deployment-package.zip
